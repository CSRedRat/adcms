<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DCParamException" xml:space="preserve">
    <value>Provided Data Center name '{0}' does not exist.</value>
  </data>
  <data name="DuplicateServiceName" xml:space="preserve">
    <value>Generated new resource name contains duplicate Service Name(s).</value>
  </data>
  <data name="DuplicateVirtualMachineName" xml:space="preserve">
    <value>Generated new resource name contains duplicate Virtual Machine Name(s).</value>
  </data>
  <data name="DuplicateAffinityGroupName" xml:space="preserve">
    <value>Generated new resource name contains duplicate Affinity Group Name(s).</value>
  </data>
  <data name="DuplicateStorageAccount" xml:space="preserve">
    <value>Generated new resource name contains duplicate Storage Account Name(s).</value>
  </data>
  <data name="EmptyOrNullParameter" xml:space="preserve">
    <value>Input parameter '{0}' value is null or empty.</value>
  </data>
  <data name="ExportMetadataFolderPathParamException" xml:space="preserve">
    <value>Export Metadata folder path does not exist.</value>
  </data>
  <data name="ImportMetadataFilePathParamException" xml:space="preserve">
    <value>Import Metadata file does not exist.</value>
  </data>
  <data name="InvalidAffinityGroupName" xml:space="preserve">
    <value>Invalid Affinity Group Name '{0}'. The name must start with a letter or a number. And, the name can contain only letters, numbers, and dashes.</value>
  </data>
  <data name="InvalidAffinityGroupNameExist" xml:space="preserve">
    <value>Affinity Group Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="InvalidAffinityGroupNameLength" xml:space="preserve">
    <value>Invalid Affinity Group Name '{0}'. The Affinity Group Name cannot be longer than 63 characters.</value>
  </data>
  <data name="InvalidParameterValue" xml:space="preserve">
    <value>Invalid value for parameter '{0}'.</value>
  </data>
  <data name="InvalidStorageAccount" xml:space="preserve">
    <value>Invalid Storage Account Name '{0}'. The name can contain only lowercase letters and numbers.</value>
  </data>
  <data name="InvalidStorageAccountLength" xml:space="preserve">
    <value>Invalid Storage Account Name '{0}'. The Storage Account Name should be between 3 and 24 characters long.</value>
  </data>
  <data name="InvalidStorageAccountNameExist" xml:space="preserve">
    <value>Storage Account Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="JsonParsingException" xml:space="preserve">
    <value>Unable to parse the file '{0}'.</value>
  </data>
  <data name="MissingRequiredParameter" xml:space="preserve">
    <value>Required parameter '{0}' is missing. Define parameter in '{1}' .</value>
  </data>
  <data name="PublishSettingsFilePathParamException" xml:space="preserve">
    <value>Publish Settings file does not exist.</value>
  </data>
  <data name="ResourceNotFoundException" xml:space="preserve">
    <value>ResourceNotFound: No deployments were found.</value>
  </data>
  <data name="InvalidServiceNameExist" xml:space="preserve">
    <value>Service Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="InvalidServiceNameLength" xml:space="preserve">
    <value>Invalid Service Name '{0}'. The Service Name cannot be longer than 63 characters.</value>
  </data>
  <data name="SubscriptionIdParamException" xml:space="preserve">
    <value>The Provided Subscription Id '{0}' does not exists in '{1}'</value>
  </data>
  <data name="InvalidValidServiceName" xml:space="preserve">
    <value>Invalid service name {0}. Service name  can contain only letters, numbers, and hyphens. The first and last character in the field must be a letter or number. Trademarks, reserved words, and offensive words are not allowed</value>
  </data>
  <data name="InvalidVirtualMachineName" xml:space="preserve">
    <value>Invalid virtual machine name {0}. virtual machine name can contain only letters, numbers, and hyphens. The name must start with a letter and must end with a letter or a number.</value>
  </data>
  <data name="InvalidVirtualMachineExist" xml:space="preserve">
    <value>Virtual Machine Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="InvalidVirtualMachineLength" xml:space="preserve">
    <value>Virtual machine name '{0}' must contain between 3 and 15 characters.</value>
  </data>
  <data name="XMLParsingException" xml:space="preserve">
    <value>Unable to parse the file '{0}'.</value>
  </data>
  <data name="InvalidSourceDataDiskBlob" xml:space="preserve">
    <value>Source data disk {0} does not exists.</value>
  </data>
  <data name="InvalidSourceOSBlob" xml:space="preserve">
    <value>Source OS disk {0} does not exists.</value>
  </data>
  <data name="InvalidDNSServerLength" xml:space="preserve">
    <value>Invalid DNS Server Name '{0}'. The DNS Server Name should be between 1 and 63 characters.</value>
  </data>
  <data name="InvalidLocalNetworkNameLength" xml:space="preserve">
    <value>Invalid Local Network Name '{0}'. The Local Network Name should be between 1 and 63 characters.</value>
  </data>
  <data name="InvalidVirtualNetworkNameLength" xml:space="preserve">
    <value>Invalid Virtual Network Name '{0}'. The Virtual Network Name should be between 1 and 63 characters.</value>
  </data>
  <data name="InvalidDestinationPrefixName" xml:space="preserve">
    <value>Destination prefix name {0} must contain between 1 to 5 characters.</value>
  </data>
  <data name="ExceptionOccurred" xml:space="preserve">
    <value>Exception Occurred :  of type {0} : {1} {2}</value>
  </data>
  <data name="InsufficientCloudServices" xml:space="preserve">
    <value>Insufficient space for cloud services in destination subscription</value>
  </data>
  <data name="InsufficientCores" xml:space="preserve">
    <value>Insufficient space for core counts in destination subscription</value>
  </data>
  <data name="InsufficientDnsServers" xml:space="preserve">
    <value>Insufficient space for Dns servers in destination subscription</value>
  </data>
  <data name="InsufficientLocalNetwork" xml:space="preserve">
    <value>Insufficient space for local network sites in destination subscription</value>
  </data>
  <data name="InsufficientStorage" xml:space="preserve">
    <value>Insufficient space for storage accounts in destination subscription</value>
  </data>
  <data name="InsufficientVirtualNetwork" xml:space="preserve">
    <value>Insufficient space for virtual network sites in destination subscription</value>
  </data>
  <data name="InvalidDNSServerNameExist" xml:space="preserve">
    <value>DNS Server Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="InvalidLocalNetworkNameExist" xml:space="preserve">
    <value>Local Network Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="InvalidVirtualNetworkNameExist" xml:space="preserve">
    <value>Virtual Network Name '{0}' is already exist in this subscription.</value>
  </data>
  <data name="DuplicateDnsName" xml:space="preserve">
    <value>Generated new resource name contains duplicate Dns Name(s).</value>
  </data>
  <data name="DuplicateLocalNetworkName" xml:space="preserve">
    <value>Generated new resource name contains duplicate Local Network Name(s).</value>
  </data>
  <data name="DuplicateVirtualNetworkName" xml:space="preserve">
    <value>Generated new resource name contains duplicate Virtual Network Name(s).</value>
  </data>
  <data name="InvalidValidNetwork" xml:space="preserve">
    <value>Invalid name {0}. The name  can contain only letters, numbers and hyphens. The first character in the field must be a letter.</value>
  </data>
  <data name="MissingCredentialsFile" xml:space="preserve">
    <value>Either publish setting file or certificate file should be selected for {0} in '{1}'</value>
  </data>
  <data name="Destination" xml:space="preserve">
    <value>Destination</value>
  </data>
  <data name="MissingCertificate" xml:space="preserve">
    <value>A Certificate with Thumbprint '{0}' could not be located.</value>
  </data>
  <data name="MissingPrivateKeyInCertificate" xml:space="preserve">
    <value>The certificate with {0}Thumbprint '{1}' in the certificate store should contain the private key.</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="InsufficientAffinityGroups" xml:space="preserve">
    <value>Insufficient space for Affinity Groups in destination subscription</value>
  </data>
  <data name="MapperFilePathParamException" xml:space="preserve">
    <value>Mapper Xml file does not exist.</value>
  </data>
  <data name="MissingMapperAndPrefix" xml:space="preserve">
    <value>Either destination prefix or mapper xml file path should be set for {0} in '{1}'</value>
  </data>
  <data name="InvalidExtensionMapperFile" xml:space="preserve">
    <value>MapperXmlFilePath must be xml file only. Please check the parameter value is xml file extension value.</value>
  </data>
  <data name="InvalidExtensionMetadataFile" xml:space="preserve">
    <value>ImportMetadataFilePath must be json file only. Please check the parameter value is json file extension value.</value>
  </data>
</root>